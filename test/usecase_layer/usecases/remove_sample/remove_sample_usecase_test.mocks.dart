// Mocks generated by Mockito 5.3.2 from annotations
// in base_app/test/usecase_layer/usecases/remove_sample/remove_sample_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:base_app/domain_layer/model/domain_model.dart' as _i4;
import 'package:base_app/domain_layer/repository/i_sample_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ISampleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockISampleRepository extends _i1.Mock implements _i2.ISampleRepository {
  @override
  _i3.Future<_i4.Sample?> find(_i4.BaseId? id) => (super.noSuchMethod(
        Invocation.method(
          #find,
          [id],
        ),
        returnValue: _i3.Future<_i4.Sample?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.Sample?>.value(),
      ) as _i3.Future<_i4.Sample?>);
  @override
  _i3.Future<List<_i4.Sample>> findAll() => (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Sample>>.value(<_i4.Sample>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Sample>>.value(<_i4.Sample>[]),
      ) as _i3.Future<List<_i4.Sample>>);
  @override
  _i3.Future<void> save(_i4.Sample? sample) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [sample],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> remove(_i4.Sample? sample) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [sample],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<T?> transaction<T>(_i3.Future<T> Function()? f) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [f],
        ),
        returnValue: _i3.Future<T?>.value(),
        returnValueForMissingStub: _i3.Future<T?>.value(),
      ) as _i3.Future<T?>);
}
