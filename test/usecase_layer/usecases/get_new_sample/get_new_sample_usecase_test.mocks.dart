// Mocks generated by Mockito 5.3.2 from annotations
// in base_app/test/usecase_layer/usecases/get_new_sample/get_new_sample_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:base_app/domain_layer/model/domain_model.dart' as _i2;
import 'package:base_app/domain_layer/repository/i_sample_repository.dart'
    as _i3;
import 'package:base_app/domain_layer/service/i_sample_factory.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSample_0 extends _i1.SmartFake implements _i2.Sample {
  _FakeSample_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ISampleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockISampleRepository extends _i1.Mock implements _i3.ISampleRepository {
  @override
  _i4.Future<_i2.Sample?> find(_i2.BaseId? id) => (super.noSuchMethod(
        Invocation.method(
          #find,
          [id],
        ),
        returnValue: _i4.Future<_i2.Sample?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.Sample?>.value(),
      ) as _i4.Future<_i2.Sample?>);
  @override
  _i4.Future<List<_i2.Sample>> findAll() => (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Sample>>.value(<_i2.Sample>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.Sample>>.value(<_i2.Sample>[]),
      ) as _i4.Future<List<_i2.Sample>>);
  @override
  _i4.Future<void> save(_i2.Sample? sample) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [sample],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> remove(_i2.Sample? sample) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [sample],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<T?> transaction<T>(_i4.Future<T> Function()? f) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [f],
        ),
        returnValue: _i4.Future<T?>.value(),
        returnValueForMissingStub: _i4.Future<T?>.value(),
      ) as _i4.Future<T?>);
}

/// A class which mocks [ISampleFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockISampleFactory extends _i1.Mock implements _i5.ISampleFactory {
  @override
  _i4.Future<_i2.Sample> create({required String? name}) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {#name: name},
        ),
        returnValue: _i4.Future<_i2.Sample>.value(_FakeSample_0(
          this,
          Invocation.method(
            #create,
            [],
            {#name: name},
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Sample>.value(_FakeSample_0(
          this,
          Invocation.method(
            #create,
            [],
            {#name: name},
          ),
        )),
      ) as _i4.Future<_i2.Sample>);
}
