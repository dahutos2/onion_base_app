// Mocks generated by Mockito 5.3.2 from annotations
// in base_app/test/infrastructure_layer/repository/sample_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:base_app/infrastructure_layer/api/db_helper.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DbHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDbHelper extends _i1.Mock implements _i2.DbHelper {
  @override
  _i3.Future<String> getDbPath() => (super.noSuchMethod(
        Invocation.method(
          #getDbPath,
          [],
        ),
        returnValue: _i3.Future<String>.value(''),
        returnValueForMissingStub: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Future<_i4.Database?> open() => (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValue: _i3.Future<_i4.Database?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.Database?>.value(),
      ) as _i3.Future<_i4.Database?>);
  @override
  _i3.Future<void> debugDb() => (super.noSuchMethod(
        Invocation.method(
          #debugDb,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<T?> transaction<T>(_i3.Future<T> Function()? f) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [f],
        ),
        returnValue: _i3.Future<T?>.value(),
        returnValueForMissingStub: _i3.Future<T?>.value(),
      ) as _i3.Future<T?>);
  @override
  _i3.Future<List<Map<String, dynamic>>?> rawQuery(
    String? sql, [
    List<dynamic>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQuery,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>?>.value(),
        returnValueForMissingStub:
            _i3.Future<List<Map<String, dynamic>>?>.value(),
      ) as _i3.Future<List<Map<String, dynamic>>?>);
  @override
  _i3.Future<int?> rawInsert(
    String? sql, [
    List<dynamic>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawInsert,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i3.Future<int?>.value(),
        returnValueForMissingStub: _i3.Future<int?>.value(),
      ) as _i3.Future<int?>);
  @override
  _i3.Future<int?> rawDelete(
    String? sql, [
    List<dynamic>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawDelete,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i3.Future<int?>.value(),
        returnValueForMissingStub: _i3.Future<int?>.value(),
      ) as _i3.Future<int?>);
}
